
import { toast } from "sonner";

// Base API URL - in a real app, this would come from environment variables
const API_BASE_URL = "https://api.lawxpert-demo.com";

interface ApiResponse<T> {
  data?: T;
  error?: string;
}

// Generic fetch wrapper with error handling
async function fetchApi<T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<ApiResponse<T>> {
  try {
    const url = `${API_BASE_URL}${endpoint}`;
    const token = localStorage.getItem("token");
    
    const headers = {
      "Content-Type": "application/json",
      ...(token && { Authorization: `Bearer ${token}` }),
      ...options.headers,
    };

    const response = await fetch(url, {
      ...options,
      headers,
    });

    if (!response.ok) {
      // For demo purposes, we'll handle common errors specially
      if (response.status === 401) {
        // Auto logout on auth error
        localStorage.removeItem("token");
        window.location.href = "/login";
        return { error: "Session expired. Please login again." };
      }
      
      const errorData = await response.json().catch(() => ({}));
      const errorMessage = errorData.message || `Error: ${response.status}`;
      return { error: errorMessage };
    }

    // Handle no-content responses
    if (response.status === 204) {
      return { data: {} as T };
    }

    const data = await response.json();
    return { data };
  } catch (error) {
    console.error("API request failed:", error);
    return { error: "Network error. Please check your connection." };
  }
}

// Authentication
export const authApi = {
  login: async (email: string, password: string) => {
    // In a real app, this would make an API call
    // For demo, we'll simulate a successful response
    try {
      // Simulated API call delay
      await new Promise((resolve) => setTimeout(resolve, 1000));
      
      // Fake success response with token
      const token = "demo-jwt-token";
      localStorage.setItem("token", token);
      return { success: true, token };
    } catch (error) {
      console.error("Login error:", error);
      toast.error("Login failed. Please check your credentials.");
      return { success: false, error: "Login failed" };
    }
  },
  
  register: async (userData: { name: string; email: string; password: string }) => {
    // In a real app, this would make an API call
    // For demo, we'll simulate a successful response
    try {
      // Simulated API call delay
      await new Promise((resolve) => setTimeout(resolve, 1000));
      
      return { success: true };
    } catch (error) {
      console.error("Registration error:", error);
      toast.error("Registration failed. Please try again.");
      return { success: false, error: "Registration failed" };
    }
  },
  
  logout: () => {
    localStorage.removeItem("token");
    window.location.href = "/login";
  },
};

// Chat API
export const chatApi = {
  sendMessage: async (message: string) => {
    // In a real app, this would make an API call to the AI backend
    // For demo, we'll simulate a response after a delay
    try {
      // Simulated API call delay
      await new Promise((resolve) => setTimeout(resolve, 1500));
      
      // Fake response
      return {
        success: true,
        response: "This is a simulated response from the LawXpert AI assistant. In a real implementation, this would be generated by an AI model with knowledge of Indian legal context.",
      };
    } catch (error) {
      console.error("Message sending error:", error);
      return { 
        success: false, 
        error: "Failed to get a response. Please try again." 
      };
    }
  },
  
  getChatHistory: async (userId: string) => {
    // In a real app, this would fetch chat history from the backend
    // For demo, we'll return mock data
    try {
      // Simulated API call delay
      await new Promise((resolve) => setTimeout(resolve, 800));
      
      // Mock chat history
      const mockHistory = [
        {
          id: "1",
          role: "assistant",
          content: "Hello! How can I help you with legal matters today?",
          timestamp: new Date(Date.now() - 86400000).toISOString(),
        },
        {
          id: "2",
          role: "user",
          content: "I need information about filing an RTI.",
          timestamp: new Date(Date.now() - 86300000).toISOString(),
        },
        {
          id: "3",
          role: "assistant",
          content: "Right to Information (RTI) Act allows citizens to request information from public authorities. You need to submit an application with a fee of â‚¹10 to the Public Information Officer of the relevant department. Would you like me to help you draft an RTI application?",
          timestamp: new Date(Date.now() - 86200000).toISOString(),
        },
      ];
      
      return { success: true, history: mockHistory };
    } catch (error) {
      console.error("Error fetching chat history:", error);
      return { success: false, error: "Failed to load chat history" };
    }
  },
};

// Document generation API
export const documentApi = {
  generateDocument: async (documentType: string, formData: any) => {
    // In a real app, this would make an API call to generate the document
    // For demo, we'll simulate a response after a delay
    try {
      // Simulated API call delay
      await new Promise((resolve) => setTimeout(resolve, 2000));
      
      // Fake response with a document placeholder
      return {
        success: true,
        document: `This is a generated ${documentType} document based on the provided information. In a real implementation, this would be a properly formatted legal document created using templates and AI assistance.`,
      };
    } catch (error) {
      console.error("Document generation error:", error);
      return { 
        success: false, 
        error: "Failed to generate document. Please try again." 
      };
    }
  },
};

// Analytics API for admin dashboard
export const analyticsApi = {
  getCaseBacklogByState: async () => {
    // In a real app, this would fetch real analytics data
    // For demo, we'll return mock data
    try {
      const mockData = [
        { state: "Maharashtra", count: 450 },
        { state: "Delhi", count: 380 },
        { state: "Karnataka", count: 320 },
        { state: "Tamil Nadu", count: 290 },
        { state: "Uttar Pradesh", count: 410 }
      ];
      
      return { success: true, data: mockData };
    } catch (error) {
      console.error("Error fetching backlog data:", error);
      return { success: false, error: "Failed to load case backlog data" };
    }
  },
  
  getFilingTrends: async () => {
    // In a real app, this would fetch real analytics data
    // For demo, we'll return mock data
    try {
      const mockData = [
        { month: "Jan", filings: 245, disposals: 210 },
        { month: "Feb", filings: 267, disposals: 230 },
        { month: "Mar", filings: 285, disposals: 245 },
        { month: "Apr", filings: 230, disposals: 235 },
        { month: "May", filings: 275, disposals: 250 },
        { month: "Jun", filings: 290, disposals: 240 },
      ];
      
      return { success: true, data: mockData };
    } catch (error) {
      console.error("Error fetching filing trends:", error);
      return { success: false, error: "Failed to load filing trends data" };
    }
  },
  
  getCourtTypeStats: async () => {
    // In a real app, this would fetch real analytics data
    // For demo, we'll return mock data
    try {
      const mockData = [
        { type: "District", backlog: 580 },
        { type: "High Courts", backlog: 320 },
        { type: "Supreme Court", backlog: 110 },
        { type: "Consumer", backlog: 230 },
        { type: "Family", backlog: 185 }
      ];
      
      return { success: true, data: mockData };
    } catch (error) {
      console.error("Error fetching court type stats:", error);
      return { success: false, error: "Failed to load court type statistics" };
    }
  },
};

export default {
  auth: authApi,
  chat: chatApi,
  document: documentApi,
  analytics: analyticsApi,
};
